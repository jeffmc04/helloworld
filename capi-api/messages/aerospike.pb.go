// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.5.0
// source: aerospike.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAerospikeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubernetesClusterName      string           `protobuf:"bytes,1,opt,name=KubernetesClusterName,proto3" json:"KubernetesClusterName,omitempty"`
	KubernetesClusterNamespace string           `protobuf:"bytes,2,opt,name=KubernetesClusterNamespace,proto3" json:"KubernetesClusterNamespace,omitempty"`
	TargetNamespace            string           `protobuf:"bytes,3,opt,name=TargetNamespace,proto3" json:"TargetNamespace,omitempty"`
	DeployClient               bool             `protobuf:"varint,4,opt,name=DeployClient,proto3" json:"DeployClient,omitempty"`
	Name                       string           `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace                  string           `protobuf:"bytes,6,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	DatabaseType               string           `protobuf:"bytes,7,opt,name=DatabaseType,proto3" json:"DatabaseType,omitempty"`
	Options                    *DatabaseOptions `protobuf:"bytes,8,opt,name=Options,proto3" json:"Options,omitempty"`
}

func (x *CreateAerospikeClusterRequest) Reset() {
	*x = CreateAerospikeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAerospikeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAerospikeClusterRequest) ProtoMessage() {}

func (x *CreateAerospikeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAerospikeClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateAerospikeClusterRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAerospikeClusterRequest) GetKubernetesClusterName() string {
	if x != nil {
		return x.KubernetesClusterName
	}
	return ""
}

func (x *CreateAerospikeClusterRequest) GetKubernetesClusterNamespace() string {
	if x != nil {
		return x.KubernetesClusterNamespace
	}
	return ""
}

func (x *CreateAerospikeClusterRequest) GetTargetNamespace() string {
	if x != nil {
		return x.TargetNamespace
	}
	return ""
}

func (x *CreateAerospikeClusterRequest) GetDeployClient() bool {
	if x != nil {
		return x.DeployClient
	}
	return false
}

func (x *CreateAerospikeClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAerospikeClusterRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateAerospikeClusterRequest) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *CreateAerospikeClusterRequest) GetOptions() *DatabaseOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type DatabaseOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replicas int32 `protobuf:"varint,1,opt,name=Replicas,proto3" json:"Replicas,omitempty"`
}

func (x *DatabaseOptions) Reset() {
	*x = DatabaseOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseOptions) ProtoMessage() {}

func (x *DatabaseOptions) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseOptions.ProtoReflect.Descriptor instead.
func (*DatabaseOptions) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseOptions) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type CreateAerospikeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateAerospikeClusterResponse) Reset() {
	*x = CreateAerospikeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAerospikeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAerospikeClusterResponse) ProtoMessage() {}

func (x *CreateAerospikeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAerospikeClusterResponse.ProtoReflect.Descriptor instead.
func (*CreateAerospikeClusterResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{2}
}

type GetAerospikeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AerospikeName      string `protobuf:"bytes,1,opt,name=AerospikeName,proto3" json:"AerospikeName,omitempty"`
	AerospikeNamespace string `protobuf:"bytes,2,opt,name=AerospikeNamespace,proto3" json:"AerospikeNamespace,omitempty"`
}

func (x *GetAerospikeClusterRequest) Reset() {
	*x = GetAerospikeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAerospikeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAerospikeClusterRequest) ProtoMessage() {}

func (x *GetAerospikeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAerospikeClusterRequest.ProtoReflect.Descriptor instead.
func (*GetAerospikeClusterRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{3}
}

func (x *GetAerospikeClusterRequest) GetAerospikeName() string {
	if x != nil {
		return x.AerospikeName
	}
	return ""
}

func (x *GetAerospikeClusterRequest) GetAerospikeNamespace() string {
	if x != nil {
		return x.AerospikeNamespace
	}
	return ""
}

type GetAerospikeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster []byte `protobuf:"bytes,1,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Status  []byte `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *GetAerospikeClusterResponse) Reset() {
	*x = GetAerospikeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAerospikeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAerospikeClusterResponse) ProtoMessage() {}

func (x *GetAerospikeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAerospikeClusterResponse.ProtoReflect.Descriptor instead.
func (*GetAerospikeClusterResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{4}
}

func (x *GetAerospikeClusterResponse) GetCluster() []byte {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *GetAerospikeClusterResponse) GetStatus() []byte {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetAerospikeClustersByNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AerospikeNamespace string `protobuf:"bytes,1,opt,name=AerospikeNamespace,proto3" json:"AerospikeNamespace,omitempty"`
}

func (x *GetAerospikeClustersByNamespaceRequest) Reset() {
	*x = GetAerospikeClustersByNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAerospikeClustersByNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAerospikeClustersByNamespaceRequest) ProtoMessage() {}

func (x *GetAerospikeClustersByNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAerospikeClustersByNamespaceRequest.ProtoReflect.Descriptor instead.
func (*GetAerospikeClustersByNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{5}
}

func (x *GetAerospikeClustersByNamespaceRequest) GetAerospikeNamespace() string {
	if x != nil {
		return x.AerospikeNamespace
	}
	return ""
}

type GetAerospikeClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters []byte `protobuf:"bytes,1,opt,name=Clusters,proto3" json:"Clusters,omitempty"`
}

func (x *GetAerospikeClustersResponse) Reset() {
	*x = GetAerospikeClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAerospikeClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAerospikeClustersResponse) ProtoMessage() {}

func (x *GetAerospikeClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAerospikeClustersResponse.ProtoReflect.Descriptor instead.
func (*GetAerospikeClustersResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{6}
}

func (x *GetAerospikeClustersResponse) GetClusters() []byte {
	if x != nil {
		return x.Clusters
	}
	return nil
}

type GetAllAerospikeClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllAerospikeClustersRequest) Reset() {
	*x = GetAllAerospikeClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAerospikeClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAerospikeClustersRequest) ProtoMessage() {}

func (x *GetAllAerospikeClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAerospikeClustersRequest.ProtoReflect.Descriptor instead.
func (*GetAllAerospikeClustersRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{7}
}

type UpdateAerospikeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName      string           `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	ClusterNamespace string           `protobuf:"bytes,2,opt,name=ClusterNamespace,proto3" json:"ClusterNamespace,omitempty"`
	Options          *DatabaseOptions `protobuf:"bytes,3,opt,name=Options,proto3" json:"Options,omitempty"`
}

func (x *UpdateAerospikeClusterRequest) Reset() {
	*x = UpdateAerospikeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAerospikeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAerospikeClusterRequest) ProtoMessage() {}

func (x *UpdateAerospikeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAerospikeClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateAerospikeClusterRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAerospikeClusterRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateAerospikeClusterRequest) GetClusterNamespace() string {
	if x != nil {
		return x.ClusterNamespace
	}
	return ""
}

func (x *UpdateAerospikeClusterRequest) GetOptions() *DatabaseOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type UpdateAerospikeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAerospikeClusterResponse) Reset() {
	*x = UpdateAerospikeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAerospikeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAerospikeClusterResponse) ProtoMessage() {}

func (x *UpdateAerospikeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAerospikeClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateAerospikeClusterResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{9}
}

type DeleteAerospikeClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AerospikeName      string `protobuf:"bytes,1,opt,name=AerospikeName,proto3" json:"AerospikeName,omitempty"`
	AerospikeNamespace string `protobuf:"bytes,2,opt,name=AerospikeNamespace,proto3" json:"AerospikeNamespace,omitempty"`
}

func (x *DeleteAerospikeClusterRequest) Reset() {
	*x = DeleteAerospikeClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAerospikeClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAerospikeClusterRequest) ProtoMessage() {}

func (x *DeleteAerospikeClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAerospikeClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteAerospikeClusterRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAerospikeClusterRequest) GetAerospikeName() string {
	if x != nil {
		return x.AerospikeName
	}
	return ""
}

func (x *DeleteAerospikeClusterRequest) GetAerospikeNamespace() string {
	if x != nil {
		return x.AerospikeNamespace
	}
	return ""
}

type DeleteAerospikeClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAerospikeClusterResponse) Reset() {
	*x = DeleteAerospikeClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAerospikeClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAerospikeClusterResponse) ProtoMessage() {}

func (x *DeleteAerospikeClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAerospikeClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteAerospikeClusterResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{11}
}

type IsKubernetesClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *NamespacedName `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *IsKubernetesClusterRequest) Reset() {
	*x = IsKubernetesClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsKubernetesClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsKubernetesClusterRequest) ProtoMessage() {}

func (x *IsKubernetesClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsKubernetesClusterRequest.ProtoReflect.Descriptor instead.
func (*IsKubernetesClusterRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{12}
}

func (x *IsKubernetesClusterRequest) GetCluster() *NamespacedName {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type IsKubernetesClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsKubernetesCluster bool `protobuf:"varint,1,opt,name=is_kubernetes_cluster,json=isKubernetesCluster,proto3" json:"is_kubernetes_cluster,omitempty"`
}

func (x *IsKubernetesClusterResponse) Reset() {
	*x = IsKubernetesClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsKubernetesClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsKubernetesClusterResponse) ProtoMessage() {}

func (x *IsKubernetesClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsKubernetesClusterResponse.ProtoReflect.Descriptor instead.
func (*IsKubernetesClusterResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{13}
}

func (x *IsKubernetesClusterResponse) GetIsKubernetesCluster() bool {
	if x != nil {
		return x.IsKubernetesCluster
	}
	return false
}

type MapRegionToSharedClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cloud  string `protobuf:"bytes,1,opt,name=cloud,proto3" json:"cloud,omitempty"` //TODO: make enum
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *MapRegionToSharedClusterRequest) Reset() {
	*x = MapRegionToSharedClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRegionToSharedClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRegionToSharedClusterRequest) ProtoMessage() {}

func (x *MapRegionToSharedClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRegionToSharedClusterRequest.ProtoReflect.Descriptor instead.
func (*MapRegionToSharedClusterRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{14}
}

func (x *MapRegionToSharedClusterRequest) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *MapRegionToSharedClusterRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type MapRegionToSharedClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *NamespacedName `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *MapRegionToSharedClusterResponse) Reset() {
	*x = MapRegionToSharedClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRegionToSharedClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRegionToSharedClusterResponse) ProtoMessage() {}

func (x *MapRegionToSharedClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRegionToSharedClusterResponse.ProtoReflect.Descriptor instead.
func (*MapRegionToSharedClusterResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{15}
}

func (x *MapRegionToSharedClusterResponse) GetCluster() *NamespacedName {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type MapRegionToClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cloud         string `protobuf:"bytes,1,opt,name=cloud,proto3" json:"cloud,omitempty"` //TODO: make enum
	Region        string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	UserNamespace string `protobuf:"bytes,3,opt,name=user_namespace,json=userNamespace,proto3" json:"user_namespace,omitempty"`
}

func (x *MapRegionToClusterRequest) Reset() {
	*x = MapRegionToClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRegionToClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRegionToClusterRequest) ProtoMessage() {}

func (x *MapRegionToClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRegionToClusterRequest.ProtoReflect.Descriptor instead.
func (*MapRegionToClusterRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{16}
}

func (x *MapRegionToClusterRequest) GetCloud() string {
	if x != nil {
		return x.Cloud
	}
	return ""
}

func (x *MapRegionToClusterRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MapRegionToClusterRequest) GetUserNamespace() string {
	if x != nil {
		return x.UserNamespace
	}
	return ""
}

type MapRegionToClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *NamespacedName `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *MapRegionToClusterResponse) Reset() {
	*x = MapRegionToClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRegionToClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRegionToClusterResponse) ProtoMessage() {}

func (x *MapRegionToClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRegionToClusterResponse.ProtoReflect.Descriptor instead.
func (*MapRegionToClusterResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proto_rawDescGZIP(), []int{17}
}

func (x *MapRegionToClusterResponse) GetCluster() *NamespacedName {
	if x != nil {
		return x.Cluster
	}
	return nil
}

var File_aerospike_proto protoreflect.FileDescriptor

var file_aerospike_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x10, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x02,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2d,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x20, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x72, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x65, 0x72, 0x6f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3a,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa2, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x65, 0x72, 0x6f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x65,
	0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x1a,
	0x49, 0x73, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x51,
	0x0a, 0x1b, 0x49, 0x73, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x73, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x22, 0x4f, 0x0a, 0x1f, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x20, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x70, 0x0a, 0x19, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x1a,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x34,
	0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2f, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x61, 0x70, 0x69, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aerospike_proto_rawDescOnce sync.Once
	file_aerospike_proto_rawDescData = file_aerospike_proto_rawDesc
)

func file_aerospike_proto_rawDescGZIP() []byte {
	file_aerospike_proto_rawDescOnce.Do(func() {
		file_aerospike_proto_rawDescData = protoimpl.X.CompressGZIP(file_aerospike_proto_rawDescData)
	})
	return file_aerospike_proto_rawDescData
}

var file_aerospike_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_aerospike_proto_goTypes = []interface{}{
	(*CreateAerospikeClusterRequest)(nil),          // 0: messages.CreateAerospikeClusterRequest
	(*DatabaseOptions)(nil),                        // 1: messages.DatabaseOptions
	(*CreateAerospikeClusterResponse)(nil),         // 2: messages.CreateAerospikeClusterResponse
	(*GetAerospikeClusterRequest)(nil),             // 3: messages.GetAerospikeClusterRequest
	(*GetAerospikeClusterResponse)(nil),            // 4: messages.GetAerospikeClusterResponse
	(*GetAerospikeClustersByNamespaceRequest)(nil), // 5: messages.GetAerospikeClustersByNamespaceRequest
	(*GetAerospikeClustersResponse)(nil),           // 6: messages.GetAerospikeClustersResponse
	(*GetAllAerospikeClustersRequest)(nil),         // 7: messages.GetAllAerospikeClustersRequest
	(*UpdateAerospikeClusterRequest)(nil),          // 8: messages.UpdateAerospikeClusterRequest
	(*UpdateAerospikeClusterResponse)(nil),         // 9: messages.UpdateAerospikeClusterResponse
	(*DeleteAerospikeClusterRequest)(nil),          // 10: messages.DeleteAerospikeClusterRequest
	(*DeleteAerospikeClusterResponse)(nil),         // 11: messages.DeleteAerospikeClusterResponse
	(*IsKubernetesClusterRequest)(nil),             // 12: messages.IsKubernetesClusterRequest
	(*IsKubernetesClusterResponse)(nil),            // 13: messages.IsKubernetesClusterResponse
	(*MapRegionToSharedClusterRequest)(nil),        // 14: messages.MapRegionToSharedClusterRequest
	(*MapRegionToSharedClusterResponse)(nil),       // 15: messages.MapRegionToSharedClusterResponse
	(*MapRegionToClusterRequest)(nil),              // 16: messages.MapRegionToClusterRequest
	(*MapRegionToClusterResponse)(nil),             // 17: messages.MapRegionToClusterResponse
	(*NamespacedName)(nil),                         // 18: messages.NamespacedName
}
var file_aerospike_proto_depIdxs = []int32{
	1,  // 0: messages.CreateAerospikeClusterRequest.Options:type_name -> messages.DatabaseOptions
	1,  // 1: messages.UpdateAerospikeClusterRequest.Options:type_name -> messages.DatabaseOptions
	18, // 2: messages.IsKubernetesClusterRequest.cluster:type_name -> messages.NamespacedName
	18, // 3: messages.MapRegionToSharedClusterResponse.cluster:type_name -> messages.NamespacedName
	18, // 4: messages.MapRegionToClusterResponse.cluster:type_name -> messages.NamespacedName
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_aerospike_proto_init() }
func file_aerospike_proto_init() {
	if File_aerospike_proto != nil {
		return
	}
	file_kubernetes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aerospike_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAerospikeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAerospikeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAerospikeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAerospikeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAerospikeClustersByNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAerospikeClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAerospikeClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAerospikeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAerospikeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAerospikeClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAerospikeClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsKubernetesClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsKubernetesClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRegionToSharedClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRegionToSharedClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRegionToClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRegionToClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aerospike_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aerospike_proto_goTypes,
		DependencyIndexes: file_aerospike_proto_depIdxs,
		MessageInfos:      file_aerospike_proto_msgTypes,
	}.Build()
	File_aerospike_proto = out.File
	file_aerospike_proto_rawDesc = nil
	file_aerospike_proto_goTypes = nil
	file_aerospike_proto_depIdxs = nil
}
