// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: service.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AerostationKubernetesAPIClient is the client API for AerostationKubernetesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AerostationKubernetesAPIClient interface {
	CreateCluster(ctx context.Context, in *CreateKubernetesClusterRequest, opts ...grpc.CallOption) (*CreateKubernetesClusterResponse, error)
	GetCluster(ctx context.Context, in *GetKubernetesClusterRequest, opts ...grpc.CallOption) (*GetKubernetesClusterResponse, error)
	GetClusters(ctx context.Context, in *GetKubernetesClustersRequest, opts ...grpc.CallOption) (*GetKubernetesClustersResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateKubernetesClusterRequest, opts ...grpc.CallOption) (*UpdateKubernetesClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteKubernetesClusterRequest, opts ...grpc.CallOption) (*DeleteKubernetesClusterResponse, error)
	// Validation
	IsKubernetesCluster(ctx context.Context, in *IsKubernetesClusterRequest, opts ...grpc.CallOption) (*IsKubernetesClusterResponse, error)
	// Info
	MapRegionToSharedCluster(ctx context.Context, in *MapRegionToSharedClusterRequest, opts ...grpc.CallOption) (*MapRegionToSharedClusterResponse, error)
	MapRegionToCluster(ctx context.Context, in *MapRegionToClusterRequest, opts ...grpc.CallOption) (*MapRegionToClusterResponse, error)
}

type aerostationKubernetesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAerostationKubernetesAPIClient(cc grpc.ClientConnInterface) AerostationKubernetesAPIClient {
	return &aerostationKubernetesAPIClient{cc}
}

func (c *aerostationKubernetesAPIClient) CreateCluster(ctx context.Context, in *CreateKubernetesClusterRequest, opts ...grpc.CallOption) (*CreateKubernetesClusterResponse, error) {
	out := new(CreateKubernetesClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationKubernetesAPIClient) GetCluster(ctx context.Context, in *GetKubernetesClusterRequest, opts ...grpc.CallOption) (*GetKubernetesClusterResponse, error) {
	out := new(GetKubernetesClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationKubernetesAPIClient) GetClusters(ctx context.Context, in *GetKubernetesClustersRequest, opts ...grpc.CallOption) (*GetKubernetesClustersResponse, error) {
	out := new(GetKubernetesClustersResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/GetClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationKubernetesAPIClient) UpdateCluster(ctx context.Context, in *UpdateKubernetesClusterRequest, opts ...grpc.CallOption) (*UpdateKubernetesClusterResponse, error) {
	out := new(UpdateKubernetesClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationKubernetesAPIClient) DeleteCluster(ctx context.Context, in *DeleteKubernetesClusterRequest, opts ...grpc.CallOption) (*DeleteKubernetesClusterResponse, error) {
	out := new(DeleteKubernetesClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationKubernetesAPIClient) IsKubernetesCluster(ctx context.Context, in *IsKubernetesClusterRequest, opts ...grpc.CallOption) (*IsKubernetesClusterResponse, error) {
	out := new(IsKubernetesClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/IsKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationKubernetesAPIClient) MapRegionToSharedCluster(ctx context.Context, in *MapRegionToSharedClusterRequest, opts ...grpc.CallOption) (*MapRegionToSharedClusterResponse, error) {
	out := new(MapRegionToSharedClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/MapRegionToSharedCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationKubernetesAPIClient) MapRegionToCluster(ctx context.Context, in *MapRegionToClusterRequest, opts ...grpc.CallOption) (*MapRegionToClusterResponse, error) {
	out := new(MapRegionToClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationKubernetesAPI/MapRegionToCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AerostationKubernetesAPIServer is the server API for AerostationKubernetesAPI service.
// All implementations must embed UnimplementedAerostationKubernetesAPIServer
// for forward compatibility
type AerostationKubernetesAPIServer interface {
	CreateCluster(context.Context, *CreateKubernetesClusterRequest) (*CreateKubernetesClusterResponse, error)
	GetCluster(context.Context, *GetKubernetesClusterRequest) (*GetKubernetesClusterResponse, error)
	GetClusters(context.Context, *GetKubernetesClustersRequest) (*GetKubernetesClustersResponse, error)
	UpdateCluster(context.Context, *UpdateKubernetesClusterRequest) (*UpdateKubernetesClusterResponse, error)
	DeleteCluster(context.Context, *DeleteKubernetesClusterRequest) (*DeleteKubernetesClusterResponse, error)
	// Validation
	IsKubernetesCluster(context.Context, *IsKubernetesClusterRequest) (*IsKubernetesClusterResponse, error)
	// Info
	MapRegionToSharedCluster(context.Context, *MapRegionToSharedClusterRequest) (*MapRegionToSharedClusterResponse, error)
	MapRegionToCluster(context.Context, *MapRegionToClusterRequest) (*MapRegionToClusterResponse, error)
	mustEmbedUnimplementedAerostationKubernetesAPIServer()
}

// UnimplementedAerostationKubernetesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAerostationKubernetesAPIServer struct {
}

func (UnimplementedAerostationKubernetesAPIServer) CreateCluster(context.Context, *CreateKubernetesClusterRequest) (*CreateKubernetesClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) GetCluster(context.Context, *GetKubernetesClusterRequest) (*GetKubernetesClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) GetClusters(context.Context, *GetKubernetesClustersRequest) (*GetKubernetesClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) UpdateCluster(context.Context, *UpdateKubernetesClusterRequest) (*UpdateKubernetesClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) DeleteCluster(context.Context, *DeleteKubernetesClusterRequest) (*DeleteKubernetesClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) IsKubernetesCluster(context.Context, *IsKubernetesClusterRequest) (*IsKubernetesClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsKubernetesCluster not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) MapRegionToSharedCluster(context.Context, *MapRegionToSharedClusterRequest) (*MapRegionToSharedClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapRegionToSharedCluster not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) MapRegionToCluster(context.Context, *MapRegionToClusterRequest) (*MapRegionToClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapRegionToCluster not implemented")
}
func (UnimplementedAerostationKubernetesAPIServer) mustEmbedUnimplementedAerostationKubernetesAPIServer() {
}

// UnsafeAerostationKubernetesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AerostationKubernetesAPIServer will
// result in compilation errors.
type UnsafeAerostationKubernetesAPIServer interface {
	mustEmbedUnimplementedAerostationKubernetesAPIServer()
}

func RegisterAerostationKubernetesAPIServer(s grpc.ServiceRegistrar, srv AerostationKubernetesAPIServer) {
	s.RegisterService(&AerostationKubernetesAPI_ServiceDesc, srv)
}

func _AerostationKubernetesAPI_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).CreateCluster(ctx, req.(*CreateKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationKubernetesAPI_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).GetCluster(ctx, req.(*GetKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationKubernetesAPI_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubernetesClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).GetClusters(ctx, req.(*GetKubernetesClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationKubernetesAPI_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).UpdateCluster(ctx, req.(*UpdateKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationKubernetesAPI_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).DeleteCluster(ctx, req.(*DeleteKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationKubernetesAPI_IsKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).IsKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/IsKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).IsKubernetesCluster(ctx, req.(*IsKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationKubernetesAPI_MapRegionToSharedCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRegionToSharedClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).MapRegionToSharedCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/MapRegionToSharedCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).MapRegionToSharedCluster(ctx, req.(*MapRegionToSharedClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationKubernetesAPI_MapRegionToCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRegionToClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationKubernetesAPIServer).MapRegionToCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationKubernetesAPI/MapRegionToCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationKubernetesAPIServer).MapRegionToCluster(ctx, req.(*MapRegionToClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AerostationKubernetesAPI_ServiceDesc is the grpc.ServiceDesc for AerostationKubernetesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AerostationKubernetesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.AerostationKubernetesAPI",
	HandlerType: (*AerostationKubernetesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _AerostationKubernetesAPI_CreateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _AerostationKubernetesAPI_GetCluster_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _AerostationKubernetesAPI_GetClusters_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _AerostationKubernetesAPI_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _AerostationKubernetesAPI_DeleteCluster_Handler,
		},
		{
			MethodName: "IsKubernetesCluster",
			Handler:    _AerostationKubernetesAPI_IsKubernetesCluster_Handler,
		},
		{
			MethodName: "MapRegionToSharedCluster",
			Handler:    _AerostationKubernetesAPI_MapRegionToSharedCluster_Handler,
		},
		{
			MethodName: "MapRegionToCluster",
			Handler:    _AerostationKubernetesAPI_MapRegionToCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AerostationAerospikeAPIClient is the client API for AerostationAerospikeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AerostationAerospikeAPIClient interface {
	CreateCluster(ctx context.Context, in *CreateAerospikeClusterRequest, opts ...grpc.CallOption) (*CreateAerospikeClusterResponse, error)
	GetCluster(ctx context.Context, in *GetAerospikeClusterRequest, opts ...grpc.CallOption) (*GetAerospikeClusterResponse, error)
	GetClusters(ctx context.Context, in *GetAerospikeClustersByNamespaceRequest, opts ...grpc.CallOption) (*GetAerospikeClustersResponse, error)
	GetAllClusters(ctx context.Context, in *GetAllAerospikeClustersRequest, opts ...grpc.CallOption) (*GetAerospikeClustersResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateAerospikeClusterRequest, opts ...grpc.CallOption) (*UpdateAerospikeClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteAerospikeClusterRequest, opts ...grpc.CallOption) (*DeleteAerospikeClusterResponse, error)
}

type aerostationAerospikeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAerostationAerospikeAPIClient(cc grpc.ClientConnInterface) AerostationAerospikeAPIClient {
	return &aerostationAerospikeAPIClient{cc}
}

func (c *aerostationAerospikeAPIClient) CreateCluster(ctx context.Context, in *CreateAerospikeClusterRequest, opts ...grpc.CallOption) (*CreateAerospikeClusterResponse, error) {
	out := new(CreateAerospikeClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationAerospikeAPI/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationAerospikeAPIClient) GetCluster(ctx context.Context, in *GetAerospikeClusterRequest, opts ...grpc.CallOption) (*GetAerospikeClusterResponse, error) {
	out := new(GetAerospikeClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationAerospikeAPI/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationAerospikeAPIClient) GetClusters(ctx context.Context, in *GetAerospikeClustersByNamespaceRequest, opts ...grpc.CallOption) (*GetAerospikeClustersResponse, error) {
	out := new(GetAerospikeClustersResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationAerospikeAPI/GetClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationAerospikeAPIClient) GetAllClusters(ctx context.Context, in *GetAllAerospikeClustersRequest, opts ...grpc.CallOption) (*GetAerospikeClustersResponse, error) {
	out := new(GetAerospikeClustersResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationAerospikeAPI/GetAllClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationAerospikeAPIClient) UpdateCluster(ctx context.Context, in *UpdateAerospikeClusterRequest, opts ...grpc.CallOption) (*UpdateAerospikeClusterResponse, error) {
	out := new(UpdateAerospikeClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationAerospikeAPI/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerostationAerospikeAPIClient) DeleteCluster(ctx context.Context, in *DeleteAerospikeClusterRequest, opts ...grpc.CallOption) (*DeleteAerospikeClusterResponse, error) {
	out := new(DeleteAerospikeClusterResponse)
	err := c.cc.Invoke(ctx, "/messages.AerostationAerospikeAPI/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AerostationAerospikeAPIServer is the server API for AerostationAerospikeAPI service.
// All implementations must embed UnimplementedAerostationAerospikeAPIServer
// for forward compatibility
type AerostationAerospikeAPIServer interface {
	CreateCluster(context.Context, *CreateAerospikeClusterRequest) (*CreateAerospikeClusterResponse, error)
	GetCluster(context.Context, *GetAerospikeClusterRequest) (*GetAerospikeClusterResponse, error)
	GetClusters(context.Context, *GetAerospikeClustersByNamespaceRequest) (*GetAerospikeClustersResponse, error)
	GetAllClusters(context.Context, *GetAllAerospikeClustersRequest) (*GetAerospikeClustersResponse, error)
	UpdateCluster(context.Context, *UpdateAerospikeClusterRequest) (*UpdateAerospikeClusterResponse, error)
	DeleteCluster(context.Context, *DeleteAerospikeClusterRequest) (*DeleteAerospikeClusterResponse, error)
	mustEmbedUnimplementedAerostationAerospikeAPIServer()
}

// UnimplementedAerostationAerospikeAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAerostationAerospikeAPIServer struct {
}

func (UnimplementedAerostationAerospikeAPIServer) CreateCluster(context.Context, *CreateAerospikeClusterRequest) (*CreateAerospikeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedAerostationAerospikeAPIServer) GetCluster(context.Context, *GetAerospikeClusterRequest) (*GetAerospikeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedAerostationAerospikeAPIServer) GetClusters(context.Context, *GetAerospikeClustersByNamespaceRequest) (*GetAerospikeClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedAerostationAerospikeAPIServer) GetAllClusters(context.Context, *GetAllAerospikeClustersRequest) (*GetAerospikeClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClusters not implemented")
}
func (UnimplementedAerostationAerospikeAPIServer) UpdateCluster(context.Context, *UpdateAerospikeClusterRequest) (*UpdateAerospikeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedAerostationAerospikeAPIServer) DeleteCluster(context.Context, *DeleteAerospikeClusterRequest) (*DeleteAerospikeClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedAerostationAerospikeAPIServer) mustEmbedUnimplementedAerostationAerospikeAPIServer() {
}

// UnsafeAerostationAerospikeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AerostationAerospikeAPIServer will
// result in compilation errors.
type UnsafeAerostationAerospikeAPIServer interface {
	mustEmbedUnimplementedAerostationAerospikeAPIServer()
}

func RegisterAerostationAerospikeAPIServer(s grpc.ServiceRegistrar, srv AerostationAerospikeAPIServer) {
	s.RegisterService(&AerostationAerospikeAPI_ServiceDesc, srv)
}

func _AerostationAerospikeAPI_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAerospikeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationAerospikeAPIServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationAerospikeAPI/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationAerospikeAPIServer).CreateCluster(ctx, req.(*CreateAerospikeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationAerospikeAPI_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAerospikeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationAerospikeAPIServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationAerospikeAPI/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationAerospikeAPIServer).GetCluster(ctx, req.(*GetAerospikeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationAerospikeAPI_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAerospikeClustersByNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationAerospikeAPIServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationAerospikeAPI/GetClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationAerospikeAPIServer).GetClusters(ctx, req.(*GetAerospikeClustersByNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationAerospikeAPI_GetAllClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAerospikeClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationAerospikeAPIServer).GetAllClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationAerospikeAPI/GetAllClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationAerospikeAPIServer).GetAllClusters(ctx, req.(*GetAllAerospikeClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationAerospikeAPI_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAerospikeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationAerospikeAPIServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationAerospikeAPI/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationAerospikeAPIServer).UpdateCluster(ctx, req.(*UpdateAerospikeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerostationAerospikeAPI_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAerospikeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerostationAerospikeAPIServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.AerostationAerospikeAPI/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerostationAerospikeAPIServer).DeleteCluster(ctx, req.(*DeleteAerospikeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AerostationAerospikeAPI_ServiceDesc is the grpc.ServiceDesc for AerostationAerospikeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AerostationAerospikeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.AerostationAerospikeAPI",
	HandlerType: (*AerostationAerospikeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _AerostationAerospikeAPI_CreateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _AerostationAerospikeAPI_GetCluster_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _AerostationAerospikeAPI_GetClusters_Handler,
		},
		{
			MethodName: "GetAllClusters",
			Handler:    _AerostationAerospikeAPI_GetAllClusters_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _AerostationAerospikeAPI_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _AerostationAerospikeAPI_DeleteCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
